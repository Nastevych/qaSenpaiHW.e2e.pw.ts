//#region 1Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–∞—Å–∏–≤—É  
// ‚úèÔ∏è –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î input –º–∞—Å–∏–≤–æ–º.  
// –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ:  
// console.log(isArray('QA DOJO')); // false  
// console.log(isArray([1, 2, 4, 0])); // true    
//#endregion
export function arrayOrNotCheck(input){
    return Array.isArray(input);
};

console.log(arrayOrNotCheck('QA DOJO'));  
console.log(arrayOrNotCheck([1, 2, 4, 0]))

//#region 2Ô∏è‚É£ –ö–ª–æ–Ω—É–≤–∞–Ω–Ω—è –º–∞—Å–∏–≤—É  
// ‚úèÔ∏è –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–ø—ñ—ó –º–∞—Å–∏–≤—É.  
// –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ:  
// console.log(cloneArray([1, 2, 4, 0])); // [1, 2, 4, 0]  
// console.log(cloneArray([1, 2, [4, 0]])); // [1, 2, [4, 0]]
//#endregion   
export function cloneArray (arr: any[]){
    return [...arr];
};

console.log(cloneArray([1, 2, 4, 0]));
console.log(cloneArray([1, 2, [4, 0]]))

//#region 3Ô∏è‚É£ –ü–µ—Ä—à—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –º–∞—Å–∏–≤—É  
// ‚úèÔ∏è –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–µ—Ä—à–∏—Ö n –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –º–∞—Å–∏–≤—É.  
// –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ:  
// console.log(first([7, 9, 0, -2])); // 7  
// console.log(first([7, 9, 0, -2], 3)); // [7, 9, 0]   
//#endregion

export function firstArrElement (arr: any [], n: number){
    return arr.slice(0, n);
};
console.log(firstArrElement([7, 9, 0, -2], 1));
console.log(firstArrElement([7, 9, 0, -2], 3));

//#region 4Ô∏è‚É£ –û—Å—Ç–∞–Ω–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –º–∞—Å–∏–≤—É  
// ‚úèÔ∏è –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö n –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –º–∞—Å–∏–≤—É.  
// –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ:  
// console.log(last([7, 9, 0, -2])); // -2  
// console.log(last([7, 9, 0, -2], 3)); // [9, 0, -2]    
//#endregion

export function lastArrElement (arr: any [], n: number){
    return arr.slice(-n);
};

console.log(lastArrElement([7, 9, 0, -2], 1));
console.log(lastArrElement([7, 9, 0, -2], 3));

//#region5Ô∏è‚É£ –û–±‚Äô—î–¥–Ω–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –º–∞—Å–∏–≤—É  
// ‚úèÔ∏è –ù–∞–ø–∏—à–∏ –ø—Ä–æ–≥—Ä–∞–º—É, —â–æ –æ–±'—î–¥–Ω—É—î –µ–ª–µ–º–µ–Ω—Ç–∏ –º–∞—Å–∏–≤—É —É —Å—Ç—Ä–æ–∫—É.   (–≥—É–≥–ª—ñ—Ç—å —è–∫ —Ü–µ –∑—Ä–æ–±–∏—Ç–∏)
// –ü—Ä–∏–∫–ª–∞–¥:  
// myColor = ["Red", "Green", "White", "Black"];  
// "Red,Green,White,Black"  
// "Red+Green+White+Black"    

//#endregion

export function joinArrayElements(arr: any [], separator: string){
    return arr.join(separator);
};
const myColor = ["Red", "Green", "White", "Black"];  

console.log(joinArrayElements(myColor, " ,"));
console.log(joinArrayElements(myColor, "+"));

//#region 6Ô∏è‚É£ –î–µ—Ñ—ñ—Å–∏ –º—ñ–∂ –ø–∞—Ä–Ω–∏–º–∏ —á–∏—Å–ª–∞–º–∏  ‚≠êÔ∏è  
// ‚úèÔ∏è –ü—Ä–æ–≥—Ä–∞–º–∞, —â–æ –¥–æ–¥–∞—î –¥–µ—Ñ—ñ—Å–∏ –º—ñ–∂ –ø–∞—Ä–Ω–∏–º–∏ —á–∏—Å–ª–∞–º–∏.   (–∑–∞–≤–¥–∞–Ω–Ω—è —ñ–∑ –∑—ñ—Ä–æ—á–∫–æ—é ‚≠êÔ∏è)
// –ü—Ä–∏–∫–ª–∞–¥:  
// –í–≤—ñ–¥: 025468  
// –í–∏–≤—ñ–¥: 0-254-6-8  
//#endregion

export function addSeparatorBetweenEvanArrNumbers (arr: number[]){
    const newArr: string[] = [];
    arr.forEach((number, i) => {
        if (number % 2 === 0 && arr[i +1] % 2 === 0){
            newArr.push(`${number}-`);
        } else {
            newArr.push(number.toString());
        }
    });
   return newArr.join("");
};

const numbers = [0, 2, 5, 4, 6, 8];
console.log(addSeparatorBetweenEvanArrNumbers(numbers));



export function addDashBetweenPairNumbers(num){
    const str = String(num);
    let newStr = '';
    
    for(let i = 0; i < str.length; i++){
        newStr += str[i];
      
        if (Number(str[i]) % 2 === 0 && Number(str[i+1]) % 2 === 0){
            newStr += '-';
      };
    }

    return newStr;
};

const string = '254678';
console.log(addDashBetweenPairNumbers(string));

//#region 7Ô∏è‚É£ –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –º–∞—Å–∏–≤—É ‚≠êÔ∏è 
// ‚úèÔ∏è –ù–∞–ø–∏—à–∏ –ø—Ä–æ–≥—Ä–∞–º—É –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —á–∏—Å–µ–ª —É –º–∞—Å–∏–≤—ñ.   (–∑–∞–≤–¥–∞–Ω–Ω—è —ñ–∑ –∑—ñ—Ä–æ—á–∫–æ—é ‚≠êÔ∏è)
// –ü—Ä–∏–∫–ª–∞–¥:  
// var arr1 = [-3, 8, 7, 6, 5, -4, 3, 2, 1];  
// –í–∏–≤—ñ–¥: -4,-3,1,2,3,5,6,7,8    
//#endregion

export function arrSort(arr: number[]){
    return arr.sort((a,b) => a -b);
};

var arr1 = [-3, 81, 7, 6100, 5, -4, 3, 2, 1]; 
console.log(arrSort(arr1));

//#region 8Ô∏è‚É£ –ß–∏—Å–ª–∞ –≤—ñ–¥ 1 –¥–æ 345
// ‚úèÔ∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π —Ü–∏–∫–ª, —â–æ–±  —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –º–∞—Å–∏–≤ –∑ —á–∏—Å–ª–∞–º–∏  –≤—ñ–¥ 1 –¥–æ 345.
//#endregion

export function numArr (number: number){
const numArr: number [] = [];
for (let i = 1; i <= number; i++){
    numArr.push(i);
};
return numArr
};

console.log(numArr(365));

//#region 9Ô∏è‚É£ –°—É–º–∞ —á–∏—Å–µ–ª –≤—ñ–¥ 1 –¥–æ 100
// ‚úèÔ∏è –ù–∞–ø–∏—à–∏ –ø—Ä–æ–≥—Ä–∞–º—É, —è–∫–∞ –∑–Ω–∞–π–¥–µ —Å—É–º—É —á–∏—Å–µ–ª –≤—ñ–¥ 1 –¥–æ 100.
//#endregion

export function sumOfNumbers(start:number, end: number){
    let sumOfNumbers = 0;
    for (let i = start; i <= end; i++){
    sumOfNumbers += i;
    };
return sumOfNumbers;
}

console.log(sumOfNumbers(1, 100))

//#region üîü –ß–∏—Å–ª–∞ –≤—ñ–¥ 241 –¥–æ 1
// ‚úèÔ∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π —Ü–∏–∫–ª, —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –º–∞—Å–∏–≤ –∑ —á–∏—Å–ª–∞–º–∏ —É –∑–≤–æ—Ä–æ—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É –≤—ñ–¥ 241 –¥–æ 1.
//#endregion

export function reversNumArr (number: number){
    const numArr: number [] = [];
    for (let i = 1; i <= number; i++){
        numArr.push(i);
    };
    return numArr.reverse()
    };
    
    console.log(reversNumArr(241));

//#region 1Ô∏è‚É£1Ô∏è‚É£ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–µ —á–∏—Å–ª–æ –∑ –¥–≤–æ—Ö
// ‚úèÔ∏è –ù–∞–ø–∏—à–∏ –ø—Ä–æ–≥—Ä–∞–º—É, —è–∫–∞ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–∞–π–±—ñ–ª—å—à–µ —Ü—ñ–ª–µ —á–∏—Å–ª–æ –∑ –¥–≤–æ—Ö. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π if –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è.
//#endregion

export function findLargestNumber(a: number, b: number){
    if (a > b){
        return a;
    } else if (b > a){
        return b;
    } else {throw Error(`${a} = ${b}`);}
    
};

console.log(findLargestNumber(0, 1));

